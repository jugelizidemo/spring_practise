<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--配置springIOC容器中的bean-->
    <bean id = "accountService" class="net.practise12.springaopadvicetype.service.impl.AccountServiceImpl"></bean>

    <!--spring中基于xml的AOP配置步骤
    1.将通知的bean交给spinrg管理
    2.使用aop:config标签表明开始AOP的配置
    3.使用aop:aspect标签表明配置切面
            id属性:切面的唯一标识
            ref属性:引用的通知类bean的id
    4.在aop:aspect标签的内部使用对应的标签类配置通知(advice)的类型
            aop:before:前置通知
                method属性:用于指定logger类中哪个方法作为前置通知
                pointcut属性:用于指定切入点表达式,表示对业务中的哪些方法增强
                切入点表达式语法:
                    关键字:execution(表达式)
                    表达式:访问修饰符 返回值 包名.类名.方法名(参数列表)
                    标准写法:public void net.practise11.springaop.service.impl.AccountServiceImpl.saveAccount()
             1.访问修饰符可以省略
                void net.practise11.springaop.service.impl.AccountServiceImpl.saveAccount()
             2.返回值可以使用通配符*,标识任意返回值
                * net.practise11.springaop.service.impl.AccountServiceImpl.saveAccount()
             3.包名可以使用通配符*,表示任意包,但是有几级包,就需要写几个*.
                * *.*.*.*.*.AccountServiceImpl.saveAccount()
             4.包名可以使用..表示当前包及其自包*
                * *..AccountServiceImpl.saveAccount()
             5.类名和方法名都可以使用*来实现统配
                * *..*.*()
             6.参数列表:
                可以直接写数据类型:基本类型直接写名称 int,引用类型写包名.类名 java.lang.Integer
                可以使用通配符表示任意类型,但是必须有参数
                可以使用..表示有无参数均可,有参数可以是任意类型
                所有的方法都得到增强的全统配写法:* *..*.*(..)

             7.实际开发中的切入点表达式通常写法:
               切到业务层实现类下的所有方法:* net.practise11.springaop.service.impl.*.*(..)

    -->

    <!--配置Logger类-->
    <bean id="logger" class="net.practise12.springaopadvicetype.utils.Logger"></bean>

    <!--配置AOP-->
 <!--   <aop:config>
        <aop:aspect id = "logAdvice" ref = "logger">
            &lt;!&ndash;配置通知的类型,并且建立通知方法和切入点方法的关联&ndash;&gt;
            &lt;!&ndash;前置通知,在切入点方法执行之前执行&ndash;&gt;
            <aop:before method="beforePrintLog" pointcut="execution(* net.practise12.springaopadvicetype.service.impl.*.*(..))"></aop:before>
            &lt;!&ndash;后置通知,在切入点方法正常执行后执行,和异常通知永远互斥执行&ndash;&gt;
            <aop:after-returning method="afterPrintLog" pointcut="execution(* net.practise12.springaopadvicetype.service.impl.*.*(..))"></aop:after-returning>
            &lt;!&ndash;异常通知,在切入点方法执行产生异常后执行,与后置通知永远互斥执行&ndash;&gt;
            <aop:after-throwing method="exceptionPrintLog" pointcut="execution(* net.practise12.springaopadvicetype.service.impl.*.*(..))"></aop:after-throwing>
            &lt;!&ndash;最终通知,无论切入点方法是否正常执行都会在其后面执行&ndash;&gt;
            <aop:after method="finalPrintLog" pointcut="execution(* net.practise12.springaopadvicetype.service.impl.*.*(..))"></aop:after>
        </aop:aspect>
    </aop:config>-->

    <!--配置AOP精简写法-->
       <aop:config>
           <aop:pointcut id = "ptc" expression="execution(* net.practise12.springaopadvicetype.service.impl.*.*(..))"></aop:pointcut>
           <aop:aspect id = "logAdvice" ref = "logger">
               <!--配置通知的类型,并且建立通知方法和切入点方法的关联-->
               <!--前置通知,在切入点方法执行之前执行-->
               <aop:before method="beforePrintLog" pointcut-ref="ptc"></aop:before>
               <!--后置通知,在切入点方法正常执行后执行,和异常通知永远互斥执行-->
               <aop:after-returning method="afterPrintLog" pointcut-ref="ptc"></aop:after-returning>
               <!--异常通知,在切入点方法执行产生异常后执行,与后置通知永远互斥执行-->
               <aop:after-throwing method="exceptionPrintLog" pointcut-ref="ptc"></aop:after-throwing>
               <!--最终通知,无论切入点方法是否正常执行都会在其后面执行-->
               <aop:after method="finalPrintLog" pointcut-ref="ptc"></aop:after>

               <!--环绕通知,具体功能看aroundPrintLog()方法-->
               <aop:around method="aroundPrintLog" pointcut-ref="ptc"></aop:around>

               <!--配置切入点表达式,id属性用于指定表达式的唯一标识,expression属性用于指定表达式内容
                此标签写在aop:aspect标签内部,只能当前切面使用
                它还可以写在aop:aspect标签外部,此时所有切面都可以使用,但一定要写在aop:aspect标签的前面-->
              <!-- <aop:pointcut id = "ptc" expression="execution(* net.practise12.springaopadvicetype.service.impl.*.*(..))"></aop:pointcut>-->
           </aop:aspect>
       </aop:config>


</beans>