<?xml version="1.0" encoding="UTF-8"?>
<!--<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">-->

    <!--******************************************************-->
    <!--创建bean的三种方式-->

    <!--第一种:使用默认构造函数创建(不管是否是private都可以创建),在配置文件中使用bean标签,只有id与class属性,没有别的属性时,
    第一种:使用默认构造函数创建(不管是否是private都可以创建,反射支持),在配置文件中使用bean标签,只有id与class属性,没有别的属性时,
    spring采用默认构造函数创建bean对象,如果没有构造函数,则bean创建失败-->

    <!-- <bean id="accountSaveService" class="com.hxl.jugelizidemo.service.impl.AccountSaveServiceImpl"></bean>-->

    <!--第二种:使用普通工厂中的方法创建bean(使用其他类中的方法获取bean),因为别人创建好的类,jar包中的class字节码,可能就没有构造函数-->
   <!--<bean id = "instanceFactory" class="com.hxl.jugelizidemo.factory.InstanceFactory"></bean>
    <bean id = "accountSaveService" factory-bean="instanceFactory" factory-method="getService"></bean>-->

    <!--第三种:使用静态方法创建对象,并存入容器-->
    <!--<bean id = "accountSaveService" class="com.hxl.jugelizidemo.factory.StaticFactory" factory-method="getService"></bean>-->

    <!--******************************************************-->
    <!--bean的作用范围调整
        bean标签的scope属性:
        作用:用于指定bean的作用范围
        singleton:单例(默认)
        prototype:多例
        request:作用于web应用的请求范围
        session:作用域web应用的会话范围
        global-session:作用域集群环境的会话范围,当不是集群环境时就是session
        -->

    <!-- <bean id="accountSaveService" class="com.hxl.jugelizidemo.service.impl.AccountSaveServiceImpl" scope="prototype"></bean>-->

    <!--******************************************************-->
    <!--bean的生命周期
        单例对象:
            出生:当容器创建时对象出生
            活着:容器在,对象就一直存在
            死亡:容器销毁,对象消亡
            总结:单例对象的生命周期与容器相同
        多例对象:
            出生:当第一次使用对象时,spring容器创建
            活着:对象在使用过程中就一直活着
            死亡:对象长时间不使用,且没有被引用时,jvm会gc
        -->

        <!-- <bean id="accountSaveService" class="com.hxl.jugelizidemo.service.impl.AccountSaveServiceImpl"
        scope="prototype" init-method="init" destroy-method="destroy"></bean>-->


    <!--******************************************************-->
    <!--spring的依赖注入
    依赖注入:
        Dependency injection
    IOC的作用:
        降低程序间的耦合
    依赖关系的管理:
        都交给spring来维护
    在当前类需要用到其他类的对象时,由spring为我们提供,
    我们只需要在配置文件中说明依赖关系的维护:依赖注入
    依赖注入:
        能注入的数据:三种
            基本类型和String
            其他的bean类型(配置文件或者注解配置过的bean)
            复杂类型/集合类型
        注入的方式:三种
            构造函数注入
            set方法注入
            使用注解注入 -->

    <!--构造函数注入,使用标签constructor-arg,
        标签在bean标签内部,
        标签中的属性:
        1.type:指定要注入的数据类型,对应构造器中某个参数类型
        2.index:指定要注入的数据给构造函数中指定索引的参数赋值,索引从0开始
        3.name:指定构造器中指定名字的参数赋值
        4:value:用于给基本类型与String类型的数据
        5:ref:用于指定其他的在Spring IOC核心容器中出现过的bean对象

        优势:
            在获取bean对象时,注入数据是必须的操作,否则无法创建成功
        弊端:
            改变了bean对象的实例化方式(缩小了bean对象实例化的手段)
    -->
   <!-- <bean id = "accountSaveService" class="com.hxl.jugelizidemo.service.impl.AccountSaveServiceImpl">
        <constructor-arg name = "name" value = "举个栗子demo"></constructor-arg>
        <constructor-arg name = "age" value = "30"></constructor-arg>
        <constructor-arg name = "date" ref = "date"></constructor-arg>
    </bean>-->
    <!--构建日期bean-->
   <!-- <bean id = "date" class="java.util.Date"></bean>-->


    <!--set方法注入             更常用的构建方式
        涉及的标签:property
        出现的位置:bean标签内部
        标签的属性
                1.name:指定注入时所调用的set方法
                2:value:用于提供基本类型与String类型的数据
                3:ref:用于指定其他的在Spring IOC核心容器中出现过的bean对象
         优势:
            创建对象时没有明显限制,可以直接使用默认构造函数
         弊端:
            如果某个成员明确有值,则获取对象时,有可能set方法没有执行,导致成员数值为nul
        -->
    <!--<bean id="accountSaveService" class="com.hxl.jugelizidemo.service.impl.AccountSaveServiceImpl">-->
        <!--<property name="name" value = "举个栗子demo"></property>-->
        <!--<property name="age" value = "20"></property>-->
        <!--<property name="date" ref="date"></property>-->
    <!--</bean>-->
    <!--******************************************************-->



    <!--Spring中基于注解的IOC-->
    <!--要告知spring在创建容器时要扫描的包,配置所需要的标签不是在bean的约束中,而是一个名称为context名称空间和约束中-->

    <!--<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    &lt;!&ndash;扫描jugelizidemo包下及其子包中所有类上的注解&ndash;&gt;
    <context:component-scan base-package="com.hxl.jugelizidemo"></context:component-scan>-->


    <!--******************************************************-->
    <!--XML配置IOC容器进行CRUD实践-->

    <!--配置service-->
 <!--   <bean id="accountService" class="org.hxl.jugelizidemo.service.impl.AccountServiceImpl">
        &lt;!&ndash;注入DAO对象&ndash;&gt;
        <property name="accountDao" ref = "accountDao"></property>
    </bean>

    &lt;!&ndash;配置Dao&ndash;&gt;
    <bean id ="accountDao" class="org.hxl.jugelizidemo.dao.impl.AccountDaoImpl">
        <property name="runner" ref ="runner"></property>
    </bean>

    &lt;!&ndash;配置QueryRunner&ndash;&gt;&lt;!&ndash;生成多例的数据&ndash;&gt;
    <bean id = "runner" class="org.apache.commons.dbutils.QueryRunner" scope="prototype">
        &lt;!&ndash;注入数据源:构造函数注入&ndash;&gt;
        <constructor-arg name = "ds" ref ="dataSource"></constructor-arg>
    </bean>

    &lt;!&ndash;配置数据源&ndash;&gt;
    <bean id = "dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        &lt;!&ndash;连接数据库的必备信息&ndash;&gt;
        <property name="driverClass" value = "com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value = "jdbc:mysql://localhost:3306/hxl"></property>
        <property name="user" value ="root"></property>
        <property name="password" value ="claacgs"></property>
    </bean>-->

    <!--******************************************************-->
    <!--注解配置IOC容器进行CRUD实践-->

    <beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">


    <bean id = "runner" class="org.apache.commons.dbutils.QueryRunner" scope="prototype">
        <!--&lt;!&ndash;注入数据源:构造函数注入&ndash;&gt;-->
        <constructor-arg name = "ds" ref ="dataSource"></constructor-arg>
    </bean>

   <!-- &lt;!&ndash;配置数据源&ndash;&gt;-->
    <bean id = "dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--&lt;!&ndash;连接数据库的必备信息&ndash;&gt;-->
        <property name="driverClass" value = "com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value = "jdbc:mysql://localhost:3306/hxl"></property>
        <property name="user" value ="root"></property>
        <property name="password" value ="claacgs"></property>
    </bean>

    <!--扫描jugelizidemo包下及其子包中所有类上的注解-->
    <context:component-scan base-package="org.hxl.jugelizidemo"></context:component-scan>

</beans>