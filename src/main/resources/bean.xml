<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--将对象的创建交给spring管理-->
    <!--spring对bean的管理方式
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期-->

    <!--******************************************************-->
    <!--创建bean的三种方式-->

    <!--第一种:使用默认构造函数创建(不管是否是private都可以创建),在配置文件中使用bean标签,只有id与class属性,没有别的属性时,
    spring采用默认构造函数创建bean对象,如果没有构造函数,则bean创建失败-->
    <!-- <bean id="accountSaveService" class="com.hxl.jugelizidemo.service.impl.AccountSaveServiceImpl"></bean>-->

    <!--第二种:使用普通工厂中的方法创建bean(使用其他类中的方法获取bean),因为别人创建好的类,jar包中的class字节码,可能就没有构造函数-->
   <!-- <bean id = "instanceFactory" class="com.hxl.jugelizidemo.factory.InstanceFactory"></bean>
    <bean id = "accountSaveService" factory-bean="instanceFactory" factory-method="getService"></bean>-->

    <!--第三种:使用静态方法创建对象,并存入容器-->
    <!--<bean id = "accountSaveService" class="com.hxl.jugelizidemo.factory.StaticFactory" factory-method="getService"></bean>-->

    <!--******************************************************-->
    <!--bean的作用范围调整
        bean标签的scope属性:
        作用:用于指定bean的作用范围
        singleton:单例(默认)
        prototype:多例
        request:作用于web应用的请求范围
        session:作用域web应用的会话范围
        global-session:作用域集群环境的会话范围,当不是集群环境时就是session
        -->

    <!-- <bean id="accountSaveService" class="com.hxl.jugelizidemo.service.impl.AccountSaveServiceImpl" scope="prototype"></bean>-->

    <!--******************************************************-->
    <!--bean的生命周期
        单例对象:
            出生:当容器创建时对象出生
            活着:容器在,对象就一直存在
            死亡:容器销毁,对象消亡
            总结:单例对象的生命周期与容器相同
        多例对象:
            出生:当第一次使用对象时,spring容器创建
            活着:对象在使用过程中就一直活着
            死亡:对象长时间不使用,且没有被引用时,jvm会gc
        -->
<!--    <bean id="accountSaveService" class="com.hxl.jugelizidemo.service.impl.AccountSaveServiceImpl"-->
<!--          scope="prototype" init-method="init" destroy-method="destroy"></bean>-->


    <!--******************************************************-->
    <!--spring的依赖注入
    依赖注入:
        Dependency injection
    IOC的作用:
        降低程序间的耦合
    依赖关系的管理:
        都交给spring来维护
    在当前类需要用到其他类的对象时,由spring为我们提供,我们只需要在配置文件中说明依赖关系的维护:依赖注入
    依赖注入:
        能注入的数据:三种
            基本类型和String
            其他的bean类型(配置文件或者注解配置过的bean)
            复杂类型/集合类型
        注入的方式:三种
            构造函数注入
            set方法注入
            使用注解注入



    -->

</beans>