<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--创建bean的三种方式-->

    <!--第一种:使用默认构造函数创建,在配置文件中使用bean标签,只有id与class属性,没有别的属性时,
    第一种:使用默认构造函数创建(不管是否是private都可以创建,反射支持),在配置文件中使用bean标签,只有id与class属性,没有别的属性时,
    spring采用默认构造函数创建bean对象,如果没有构造函数,则bean创建失败-->
     <!--<bean id="accountService" class="net.practise2.springxml.service.impl.AccountServiceImpl"></bean>-->


    <!--第二种:使用普通工厂中的方法创建bean(使用其他类中的方法获取bean),因为别人创建好的类,jar包中的class字节码,可能就没有构造函数-->
    <!--<bean id = "beanFactory" class="net.practise2.springxml.factory.BeanFactory"></bean>
    <bean id = "accountService" factory-bean="beanFactory" factory-method="getAccountService"></bean>-->

    <!--第三种:使用静态方法创建对象,并存入容器-->
    <!--<bean id = "accountService" class="net.practise2.springxml.factory.StaticBeanFactory" factory-method="getAccountServiceStatic"></bean>-->



    <!--bean的作用范围调整
        bean标签的scope属性:
        作用:用于指定bean的作用范围
        singleton:单例(默认)
        prototype:多例
        request:作用于web应用的请求范围
        session:作用域web应用的会话范围
        global-session:作用域集群环境的会话范围,当不是集群环境时就是session
        -->

    <!-- <bean id="accountService" class="net.practise2.springxml.service.impl.AccountServiceImpl" scope="singleton"></bean>-->


    <!--bean的生命周期
        单例对象:
            出生:当容器创建时对象出生
            活着:容器在,对象就一直存在
            死亡:容器销毁,对象消亡
            总结:单例对象的生命周期与容器相同,可以手动设置init与destroy方法指定bean的初始化与销毁
        多例对象:
            出生:当第一次使用对象时,spring容器创建对象
            活着:对象在使用过程中就一直活着
            死亡:对象长时间不使用,且没有被引用时,jvm会gc
        -->

     <bean id="accountService" class="net.practise2.springxml.service.impl.AccountServiceImpl" scope="singleton"
           init-method="init" destroy-method="destroy">
     </bean>

  </beans>