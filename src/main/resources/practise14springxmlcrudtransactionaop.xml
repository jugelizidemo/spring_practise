<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--配置springIOC容器中的bean-->
    <bean id = "accountService" class="net.practise14.springxmlcrudtransactionaop.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"></property>
    </bean>

    <bean id = "accountDao" class="net.practise14.springxmlcrudtransactionaop.dao.impl.AccountDaoImpl">
        <property name="runner" ref="runner"></property>
        <property name="connecitonUtils" ref="connecitonUtils"></property>
    </bean>


    <!--配置QueryRunner--><!--生成多例的数据-->
    <bean id = "runner" class="org.apache.commons.dbutils.QueryRunner" scope="prototype">
        <!--注入数据源:构造函数注入-->
        <!--<constructor-arg name = "ds" ref ="dataSource"></constructor-arg>-->
    </bean>

    <!--配置TransactionManager类,set方法注入数据库连接管理-->
    <bean id="transactionManager" class="net.practise14.springxmlcrudtransactionaop.utils.TransactionManager">
        <property name="connecitonUtils" ref="connecitonUtils"></property>
    </bean>

    <!--配置数据库连接管理-->
    <bean id="connecitonUtils" class="net.practise14.springxmlcrudtransactionaop.utils.ConnecitonUtils">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--配置数据源bean-->
    <bean id = "dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--连接数据库的必备信息-->
        <property name="driverClass" value = "com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value = "jdbc:mysql://localhost:3306/hxl"></property>
        <property name="user" value ="root"></property>
       <!-- <property name="password" value ="claacgs"></property>-->
        <property name="password" value ="1988926he"></property>
    </bean>

    <!--配置AOP精简写法-->
       <aop:config>
           <aop:pointcut id = "ptc" expression="execution(* net.practise14.springxmlcrudtransactionaop.service.impl.*.*(..))"></aop:pointcut>
           <aop:aspect id = "transactionAdvice" ref = "transactionManager">
               <!--配置通知的类型,并且建立通知方法和切入点方法的关联
               前置通知,在切入点方法执行之前执行-->
               <aop:before method="beginTransaction" pointcut-ref="ptc"></aop:before>
               <!--后置通知,在切入点方法正常执行后执行,和异常通知永远互斥执行-->
               <aop:after-returning method="commitTransaction" pointcut-ref="ptc"></aop:after-returning>
               <!--异常通知,在切入点方法执行产生异常后执行,与后置通知永远互斥执行-->
               <aop:after-throwing method="rollbackTransaction" pointcut-ref="ptc"></aop:after-throwing>
               <!--最终通知,无论切入点方法是否正常执行都会在其后面执行-->
               <aop:after method="release" pointcut-ref="ptc"></aop:after>

               <!--环绕通知,具体功能看aroundPrintLog()方法-->
              <!-- <aop:around method="aroundPrintLog" pointcut-ref="ptc"></aop:around>-->

               <!--配置切入点表达式,id属性用于指定表达式的唯一标识,expression属性用于指定表达式内容
                此标签写在aop:aspect标签内部,只能当前切面使用
                它还可以写在aop:aspect标签外部,此时所有切面都可以使用,但一定要写在aop:aspect标签的前面-->
              <!-- <aop:pointcut id = "ptc" expression="execution(* net.practise12.springaopadvicetype.service.impl.*.*(..))"></aop:pointcut>-->
           </aop:aspect>
       </aop:config>

</beans>